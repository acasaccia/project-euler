// Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and
// are generated by the following formulae:
//
// Triangle	 	    P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
// Square	 	    P4,n=n2	 	        1, 4, 9, 16, 25, ...
// Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
// Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
// Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
// Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
//
// The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
//
// The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including
// the last number with the first).
// Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a
// different number in the set.
// This is the only set of 4-digit numbers with this property.
// Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square,
// pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

var concat = require("../lib/concat.js");
require("../lib/object_values.js");

var functions = {};
var solved = false;
var solution;
var group = {};
var formulae = ["triangle", "square", "pentagonal", "hexagonal", "heptagonal", "octagonal"];
var CACHE_SIZE = 100000;

var cache = {};
formulae.forEach(function(formula){
    functions[formula] = require("../lib/" + formula + ".js");
    var last = 0;
    var c = 1;
    cache[formula] = {};
    while (last < CACHE_SIZE) {
        last = functions[formula](c);
        cache[formula][last] = true;
        c++;
    }
});

console.log("Cache initialized");

for (var begin_digits=10; begin_digits<100; begin_digits++) {
    var build_group = function build_group(group, first_digits) {
        if (solved) {
            return;
        }
        var keys = Object.keys(group);
        var values = Object.values(group);
        if (keys.length === 6) {
            solved = true;
            solution = values.slice();
            return;
        }
        var check_candidate = function check_candidate(candidate) {
            if (values.indexOf(candidate) === -1) {
                formulae.forEach(function(formula){
                    if (keys.indexOf(formula) === -1) {
                        if (cache[formula][candidate] === true) {
                            group[formula] = candidate;
                            build_group(group, last_digits);
                        }
                        delete(group[formula]);
                    }
                });
            }
        };
        var candidate;
        if (keys.length < 5) {
            for (var last_digits=10; last_digits<100; last_digits++) {
                candidate = concat(first_digits, last_digits);
                check_candidate(candidate);
            }
        } else {
            candidate = concat(first_digits, begin_digits);
            check_candidate(candidate);
        }
    };
    build_group(group, begin_digits);
    if (solved) {
        console.log(solution);
        console.log(solution.reduce(function(p,c){
            return p+c;
        }));
        break;
    }
}